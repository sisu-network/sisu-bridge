import path from 'path';

import {
  appendFunctionCall,
  TEST_FILE,
  writeImportString,
} from '../test_utils';

const circom_tester = require('circom_tester');
const wasm_tester = circom_tester.wasm;

const IMPORT_STRING = `pragma circom 2.1.7;
include "../../circuit/sisu/sumcheck/sumcheck.circom";
`;
const FOLDER_NAME = "sumcheck";

describe("Sumcheck", function () {
  jest.setTimeout(1000 * 1000);

  beforeEach(async function () {
    writeImportString(FOLDER_NAME, IMPORT_STRING);
  });

  it("VerifyMultiProductSumCheck", async function () {
    appendFunctionCall(FOLDER_NAME, `component main = VerifyMultiProductSumCheck(0);`);
    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness = await circuit.calculateWitness({
      "transcript": ["2445070000", "800000000", "12750000", "832320000", "9976252692907259267827961723117740619287432264576292053905098135722734221406", "6650854802978814410688271583544301554861402190988244204250913287927308653390", "800000000", "10627441316997075368037200715969169907741408853893985584732552147768543627506", "17839852936987224179125455151612069075535661206302026855383286898445422762389", "9976252692907259267827961723117740619287432264576292053905098135722734221406", "21724940011393993751270413453931230900102705702158929338493083358670923967985", "19269818659504613418764494137371446783440157760875499011055791343945426456177", "10627441316997075368037200715969169907741408853893985584732552147768543627506", "2852674498953163669654427023787224343730339179090567499165564166787419782488", "14427997878160640815614556436370570136979298465911405863107179246904062626124", "21724940011393993751270413453931230900102705702158929338493083358670923967985", "3626223624862772449304356404590012989927387155624191553582427879665795512772", "824043105156170328872913359033291246764923375999047636144799953192005224400", "2852674498953163669654427023787224343730339179090567499165564166787419782488", "18984959720893403819967731791452227637167122784386985698774876033042879288349", "15258152902559922097856149629778507651780452025992776127015387423431452141355", "3626223624862772449304356404590012989927387155624191553582427879665795512772", "1830487646714687837540649197331927676532425538363300233153533385088253683410", "10930110122113434156565110043572423944427847995440349811847384044596509486444", "18984959720893403819967731791452227637167122784386985698774876033042879288349", "15993709266008021008207957542700094487992969887257479016843146257991296198467", "11401932135389028482592972546441437663548607893732624658588596699519779451767", "1830487646714687837540649197331927676532425538363300233153533385088253683410", "10037591752902720416393127386339657580842992415801309039961692295091599834631", "21511829963326764876083992458334138695445101236882678642997360964333038622034", "15993709266008021008207957542700094487992969887257479016843146257991296198467", "4306283413443629274613414216765437273923919000807275045485208000864585537529", "14206000347843556225749742757745732773705583532268218513310826977427110184351", "10037591752902720416393127386339657580842992415801309039961692295091599834631", "2923804444647015567064794371083138274487485763032215259114549105422430842533", "5107639020242708723385372692245405729582196734594344374060236614045960865126", "4306283413443629274613414216765437273923919000807275045485208000864585537529", "17342109236195502095990263752975354919058088692257956470568423802414200117042", "19399668906161300670354278253511118690279485620287254651552964188059995949819", "2923804444647015567064794371083138274487485763032215259114549105422430842533", "20804180998953260578333947989532957028963913135449805709369375656547865163390", "9847804551181368061053102390688047954534287433517031811252205707121215224004", "17342109236195502095990263752975354919058088692257956470568423802414200117042", "3171343914383569099357285810468616726502195291391804910208532583598330709073", "11749371088048720108898328118628780756726829970658259310184836406004547873407", "20804180998953260578333947989532957028963913135449805709369375656547865163390"],
      "fiat_shamir_seed": "3",
      "fiat_shamir_in_r": "0",
      "fiat_shamir_in_round": "0",
    });
    await circuit.assertOut(witness, {
      "final_value": "15132434801056229253670393870579583342472781477533408152004480186701045874696",
      "sum_over_boolean_hypercube": "2445070000",
      "random_points": ["13095702449093127949219563450162101741227601549487176480840948000884454613326", "13207876632149774398512120416712832560797575429855042357542542574884830344299", "7917721240766255325248508998690722509235233464401485816090623294747213962658", "20543537937294863740795591797720377824836357452015217400760707464127619971960", "17949005145317341248120128364227650844258207214479061701184320763703873591371", "11006970366619776151930404780663762752930554635225831738208851008963875781831", "15083527494689034468142820000969046829159441888764392665819162527022838834215", "19003359356280677755558615242548046264809878613911863089294531759495698525646", "9668475053471939859202948465713713410334686357583934565746915148819133312066", "14021500449973136431565690092521895792966551692178776266888680102621770609423", "10314193432594780436399520375462645803901407609459579088956499027702029427121", "18874997681281788151604644732867786691289132239183661628204363873693638927867", "9948102732490188112671356644114419288914068324325365888027807842387132387224", "6794839361146995473664399802060835476029677196225829734284888048772983716291", "20994396223586275029999141008699508666897154829360157824993173620072974120550"],
    });
  });
});
