import path from 'path';

import {
  appendFunctionCall,
  FpFri,
  FpFriBits,
  TEST_FILE,
  writeImportString,
} from '../test_utils';

const circom_tester = require('circom_tester');
const wasm_tester = circom_tester.wasm;

const IMPORT_STRING = `pragma circom 2.1.7;
include "../../circuit/sisu/sparse_mle.circom";
include "../../circuit/sisu/sparse_mle_generated.circom";
`;
const FOLDER_NAME = "gkr";

describe("Sparse MLE", function () {
  jest.setTimeout(1000 * 1000);

  beforeEach(async function () {
    writeImportString(FOLDER_NAME, IMPORT_STRING);
  });

  // ===
  it("PrecomputeEq_SingleIter", async function () {
    appendFunctionCall(FOLDER_NAME, 'component main = PrecomputeEq_SingleIter(9, 389, 1);');
    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness;

    // Test 1
    witness = await circuit.calculateWitness({
      "dp": ["380", "10"],
      "gi": "7"
    });
    await circuit.assertOut(witness, { "out": ["54", "329", "326", "70"] });

    // Test 2
    witness = await circuit.calculateWitness({
      "dp": ["386", "4"],
      "gi": "3"
    });
    await circuit.assertOut(witness, { "out": ["6", "381", "380", "12"] });
  });

  // ===
  it("PrecomputeEq", async function () {
    appendFunctionCall(FOLDER_NAME, 'component main = PrecomputeEq(9, 389, 4);');
    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness;

    // Test 1
    witness = await circuit.calculateWitness({
      "g": ["10", "9", "8", "7"]
    });
    await circuit.assertOut(witness, { "out": ["301", "141", "99", "279", "45", "339", "387", "348", "362", "30", "79", "258", "142", "188", "132", "372"] });

    // Test 2
    witness = await circuit.calculateWitness({
      "g": ["6", "5", "4", "3"]
    });
    await circuit.assertOut(witness, { "out": ["120", "245", "239", "180", "229", "192", "200", "149", "209", "216", "225", "119", "240", "101", "89", "360"] });
  });

  // Evaluate Test 1
  it("SparseMleEvaluate_Test1", async function () {
    const point_len = 4;
    const eval_len = 4;
    const flattened_lens = `[4, 3]`;
    const prev_output_indexes = `[1, 2, 3, 6]`;
    const last_positions = `[-1, 0, -1, -1, -1, 4, 5]`;
    const old_idxes = `[0, 3, 7, 13, 0, 1, 3]`;
    appendFunctionCall(FOLDER_NAME, `component main = SparseMleEvaluate(9, 389, ${eval_len}, ${point_len}, ${flattened_lens}, ${old_idxes}, ${prev_output_indexes}, ${last_positions});`);

    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness = await circuit.calculateWitness({
      "points": ["10", "7", "4", "3"],
      "evaluations": ["1", "2", "3", "4"]
    });
    await circuit.assertOut(witness, { "out": "105" });
  });

  // Evaluate Test 2
  it("SparseMleEvaluate_Test2", async function () {
    const point_len = 10;
    const eval_len = 16;
    const old_idxes = `[0, 9, 73, 193, 274, 283, 347, 467, 548, 557, 621, 741, 822, 831, 895, 1015, 0, 4, 12, 17, 21, 29, 34, 38, 46, 51, 55, 63, 0, 1, 2, 3]`;
    const flattened_lens = `[16, 12, 4]`;
    const last_positions = [-1, 0, -1, -1, -1, 4, -1, -1, -1, 8, -1, -1, -1, 12, -1, -1, -1, 16, 17, -1, 19, 20, -1, 22, 23, -1, 25, 26, -1, 28, 29, 30];
    const prev_output_indexes = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 18, 21, 24, 27, 31];
    appendFunctionCall(FOLDER_NAME, `component main = SparseMleEvaluate(9, 389, ${eval_len}, ${point_len}, ${flattened_lens}, ${old_idxes}, [${prev_output_indexes}], [${last_positions}]);`);

    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness = await circuit.calculateWitness({
      "points": ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1"],
      "evaluations": ["1", "2", "3", "4", "1", "2", "3", "4", "1", "2", "3", "4", "1", "2", "3", "4"]
    });
    await circuit.assertOut(witness, { "out": "74" });
  });

  // Evaluate Test 3
  it("SparseMleEvaluate_Test3", async function () {
    const point_len = 4;
    const eval_len = 2;
    const old_idxes = `[2, 11, 1, 5, 0, 2, 0, 1]`;
    const flattened_lens = `[2, 2, 2, 2]`;
    const last_positions = [-1, -1, -1, -1, -1, -1, -1, 6];
    const prev_output_indexes = [0, 1, 2, 3, 4, 5, 7];
    appendFunctionCall(FOLDER_NAME, `component main = SparseMleEvaluate(${FpFriBits}, ${FpFri}, ${eval_len}, ${point_len}, ${flattened_lens}, ${old_idxes}, [${prev_output_indexes}], [${last_positions}]);`);

    const circuit = await wasm_tester(
      path.join(__dirname, '.', TEST_FILE)
    );
    let witness = await circuit.calculateWitness({
      "points": ["5533370442514463510", "3410327868220831428", "672341621416997770", "5657318775444631189"],
      "evaluations": ["1", "1"]
    });
    await circuit.assertOut(witness, { "out": "14686984044162499956" });
  });
});
